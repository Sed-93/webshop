name: CI & Security Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd my-medusa-store
          npm install

      - name: Set up .env for backend
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/postgres" > my-medusa-store/.env
          echo "REDIS_URL=redis://localhost:6379" >> my-medusa-store/.env
          echo "JWT_SECRET=supersecret" >> my-medusa-store/.env
          echo "COOKIE_SECRET=supersecret" >> my-medusa-store/.env

      - name: Prepare Medusa DB
        run: |
          cd my-medusa-store
          npx medusa db:create
          npx medusa db:migrate

      - name: Install frontend dependencies
        run: |
          cd medusa-storefront
          npm install

      - name: Lint frontend
        run: |
          cd medusa-storefront
          npm run lint || echo "Lint issues"

      - name: Run backend tests
        run: |
          cd my-medusa-store
          npm test || echo "No backend tests"

      - name: Run frontend tests
        run: |
          cd medusa-storefront
          npm test || echo "No frontend tests"

  trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .

  sonar:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  owasp:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Webshop'
          path: '.'
          format: 'ALL'
          out: 'reports'
